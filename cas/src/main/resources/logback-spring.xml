<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <!--<include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <jmxConfigurator/>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 日志输出上下文名称 -->
    <contextName>cas</contextName>
    <property name="log.path" value="./log"></property>
    <property name="log.name" value="cas"></property>
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <appender name="ConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出日志到文件  每天一个文件 -->
    <!--输出每天的运行日志到文件SystemOut.log-->
    <appender name="SystemOutFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/${log.name}.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${log.path}/group/${log.name}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 此日志文件记录info及以上级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <!--			<onMatch>ACCEPT</onMatch>-->
            <!--			<onMismatch>DENY</onMismatch>-->
        </filter>
    </appender>

    <!--这个logger的设置是：举例在org.springframework包下面的所有输出日志必须级别level在info及以上级别才会被输出！-->
    <!--这样可以避免输出一些spring框架的许多常见debug信息!-->
    <logger name="org.springframework" level="info"/>
    <logger name="org.json" level="error"/>
    <logger name="io.netty" level="error"/>
    <logger name="org.slf4j" level="info"/>
    <logger name="ch.qos.logback" level="info"/>
    <logger name="org.apache" level="error"/>
    <logger name="io.lettuce" level="info"/>
    <logger name="com.netflix" level="info"/>
    <logger name="springfox" level="error"/>
    <logger name="org.eclipse.jetty" level="error"/>

    <!-- 生产环境配置文件 -->
    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="SystemOutFileAppender"/>
            <appender-ref ref="ConsoleAppender"/>
        </root>
    </springProfile>

    <!-- 测试环境配置文件 -->
    <springProfile name="test">
        <root level="info">
            <appender-ref ref="SystemOutFileAppender"/>
            <appender-ref ref="ConsoleAppender"/>
        </root>
    </springProfile>

    <!--开发环境配置文件-->
    <springProfile name="dev">
        <root level="debug">
            <appender-ref ref="ConsoleAppender"/>
        </root>
    </springProfile>

</configuration>